[class*='grid'] {
    --grid-auto-layout: auto-fit;
    --grid-gap: var(--gutter-m);
    --grid-item-min-width: 12.5rem;
    --grid-item-max-width: 1fr;

    display: grid;
    gap: var(--grid-gap, 1rem);

    /* Let grid-gap handle spacing between grid items. */
    > * {
        margin: 0;
    }

    /* When grid uses a UL/LI construct, override LI max-inline-size in 'typography.scss'. */
    > li {
        max-inline-size: none;
    }
}

/* Asymmetric 2-col grid (with default column widths). */
[class*='asymmetric'] {
    --grid-asymmetric-col1: 66.66%;
    --grid-asymmetric-col2: 33.33%;
    --grid-container-width: 25rem; /* --grid-item-min-width * 2 */

    /* Container queries. */
    @container (inline-size >= 25rem) {
        grid-template-columns:
            minmax(var(--grid-item-min-width), var(--grid-asymmetric-col1))
            minmax(var(--grid-item-min-width), var(--grid-asymmetric-col2));
    }

    /* Fallback. */
    @supports not (container-type: inline-size) {
        /* stylelint-disable-next-line media-feature-range-notation */
        @media (min-width: 48.0625em) {
            grid-template-columns:
                minmax(var(--grid-item-min-width), var(--grid-asymmetric-col1))
                minmax(var(--grid-item-min-width), var(--grid-asymmetric-col2));
        }
    }
}

.grid {
    /* Automatic grid layout (e.g. for galleries, card listings, etc) */
    grid-template-columns: repeat(
        var(--grid-auto-layout),
        minmax(
            min(var(--grid-item-min-width), 100%),
            var(--grid-item-max-width)
        )
    );
}

/* Centered grid. */
.grid--centered {
    justify-content: center;
}

/* 0 gap between grid items. */
.grid--no-gap {
    --grid-gap: 0;
}

/* Gap variants. */
.grid--gap-xs {
    --grid-gap: var(--gutter-xs);
}

.grid--gap-s {
    --grid-gap: var(--gutter-s);
}

.grid--gap-l {
    --grid-gap: var(--gutter-l);
}

.grid--gap-xl {
    --grid-gap: var(--gutter-xl);
}

/* Enable 2-col on small screens (even without a media query)... though eventually the column 'min-width' will enforce stacking when space is too limited, to avoid overflows. */
.grid--2-cols\@small {
    --grid-item-min-width: 6.25rem;
}

/* Asymmetric 2-col grid (with column width overrides). */
.grid--asymmetric-75-25 {
    --grid-asymmetric-col1: 75%;
    --grid-asymmetric-col2: 25%;
}

.grid--asymmetric-25-75 {
    --grid-asymmetric-col1: 25%;
    --grid-asymmetric-col2: 75%;
}

/* Using container queries for (asymmetric) grids. */
.grid-container {
    container-type: inline-size;
}
